# Generated by Django 4.2.6 on 2023-12-09 21:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import posts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=100, unique=True, verbose_name='Hashtag')),
                ('amount_use', models.PositiveIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Hashtag',
                'verbose_name_plural': 'Hashtags',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
                ('modify_at', models.DateTimeField(auto_now=True, verbose_name='Date of last modification')),
                ('body', models.CharField(max_length=280, verbose_name='Post Content')),
                ('have_media', models.BooleanField(default=False)),
                ('have_poll', models.BooleanField(default=False)),
                ('video', models.FileField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])])),
                ('img1', models.ImageField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, verbose_name='Post image 1')),
                ('img2', models.ImageField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, verbose_name='Post image 2')),
                ('img3', models.ImageField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, verbose_name='Post image 3')),
                ('img4', models.ImageField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, verbose_name='Post image 4')),
                ('gif', models.ImageField(blank=True, null=True, upload_to=posts.models.get_post_file_upload_path, verbose_name='Post gif')),
                ('num_replies', models.PositiveIntegerField(default=0, verbose_name='Replies amount')),
                ('num_repost', models.PositiveIntegerField(default=0, verbose_name='Repost amount')),
                ('num_likes', models.PositiveIntegerField(default=0, verbose_name='Likes amount')),
                ('num_views', models.PositiveIntegerField(default=0, verbose_name='Views amount')),
                ('date_to_publish', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date to be publish')),
                ('quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='posts.post', verbose_name='Quote from post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_by', to=settings.AUTH_USER_MODEL, to_field='user_handle', verbose_name='Post by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserMention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post', verbose_name='Post where was mentioned')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentioned_user', to=settings.AUTH_USER_MODEL, to_field='user_handle', verbose_name='Mentioned User')),
            ],
            options={
                'verbose_name': 'User mention',
                'verbose_name_plural': 'Users mentions',
            },
        ),
        migrations.CreateModel(
            name='PostReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_post', to='posts.post', verbose_name='Parent post')),
                ('reply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_post', to='posts.post', verbose_name='Reply post')),
            ],
            options={
                'verbose_name': 'Post reply',
                'verbose_name_plural': 'Posts replies',
            },
        ),
        migrations.CreateModel(
            name='PollPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_votes', models.PositiveBigIntegerField(default=0)),
                ('end_time', models.DateTimeField(default=posts.models.PollPost._calc_end_time)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='posts.post')),
            ],
            options={
                'verbose_name': 'Poll',
                'verbose_name_plural': 'Polls',
            },
        ),
        migrations.CreateModel(
            name='OptionPollPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=25, verbose_name='Option')),
                ('votes', models.PositiveIntegerField(default=0)),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='posts.pollpost')),
            ],
            options={
                'verbose_name': 'Poll option',
                'verbose_name_plural': 'Polls options',
                'unique_together': {('poll', 'option')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
                ('modify_at', models.DateTimeField(auto_now=True, verbose_name='Date of last modification')),
                ('notification_type', models.CharField(choices=[('mention', 'Mention'), ('like', 'Like'), ('repost', 'Repost'), ('quote', 'Quote'), ('follow', 'Follow')], max_length=20, verbose_name='Notification Type')),
                ('header', models.CharField(max_length=150)),
                ('message', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Read')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='posts.post', verbose_name='Related Post')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_recipient', to=settings.AUTH_USER_MODEL, verbose_name='Recipient user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_sender', to=settings.AUTH_USER_MODEL, verbose_name='Sender user')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ('-create_at',),
            },
        ),
        migrations.CreateModel(
            name='HashtagsPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.hashtag', to_field='tag', verbose_name='Hashtag')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post', verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Hashtag use in post',
                'verbose_name_plural': 'Hashtags use in posts',
            },
        ),
        migrations.CreateModel(
            name='VoteOptionPoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_date', models.DateTimeField(auto_now=True, verbose_name='Date of vote')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.optionpollpost')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.pollpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vote in Poll',
                'verbose_name_plural': 'Votes in Polls',
                'unique_together': {('user', 'poll')},
            },
        ),
        migrations.CreateModel(
            name='Repost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_reposted', to='posts.post', verbose_name='Liked post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repost_by', to=settings.AUTH_USER_MODEL, verbose_name='Like by')),
            ],
            options={
                'verbose_name': 'Repost',
                'verbose_name_plural': 'Reposts',
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_liked', to='posts.post', verbose_name='Liked post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Like by')),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
                'unique_together': {('user', 'post')},
            },
        ),
    ]
